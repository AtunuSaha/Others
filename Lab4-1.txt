1====>
#include <windows.h>
#include <GL/glut.h>
#include <math.h>



 void circle(float radius, float cX, float cY)
   {
    glBegin(GL_POLYGON);// Draw a Red 1x1 Square centered at origin
    for(int i=0;i<200;i++)
        {
            glColor3ub(253, 2, 25);
            float pi=3.1416;
            float A=(i*2*pi)/200;
            float r=radius;
            float x = r * cos(A);
            float y = r * sin(A);
            glVertex2f(x+cX,y+cY);

        }
        glEnd();
   }

   void circle1(float radius, float cX, float cY)
   {
    glBegin(GL_POLYGON);// Draw a Red 1x1 Square centered at origin
    for(int i=0;i<200;i++)
        {
            glColor3ub(253, 245, 2  );
            float pi=3.1416;
            float A=(i*2*pi)/200;
            float r=radius;
            float x = r * cos(A);
            float y = r * sin(A);
            glVertex2f(x+cX,y+cY);

        }
        glEnd();
   }

   void circle2(float radius, float cX, float cY)
   {
    glBegin(GL_POLYGON);// Draw a Red 1x1 Square centered at origin
    for(int i=0;i<200;i++)
        {
            glColor3ub(30, 167, 25 );
            float pi=3.1416;
            float A=(i*2*pi)/200;
            float r=radius;
            float x = r * cos(A);
            float y = r * sin(A);
            glVertex2f(x+cX,y+cY);

        }
        glEnd();
   }

   void circle3(float radius, float cX, float cY)
   {
    glBegin(GL_POLYGON);// Draw a Red 1x1 Square centered at origin
    for(int i=0;i<200;i++)
        {
            glColor3ub(30, 167, 25 );
            float pi=3.1416;
            float A=(i*2*pi)/200;
            float r=radius;
            float x = r * cos(A);
            float y = r * sin(A);
            glVertex2f(x+cX,y+cY);

        }
        glEnd();
   }

    void circle4(float radius, float cX, float cY)
   {
    glBegin(GL_POLYGON);// Draw a Red 1x1 Square centered at origin
    for(int i=0;i<200;i++)
        {
            glColor3ub(30, 167, 25 );
            float pi=3.1416;
            float A=(i*2*pi)/200;
            float r=radius;
            float x = r * cos(A);
            float y = r * sin(A);
            glVertex2f(x+cX,y+cY);

        }
        glEnd();
   }



void display() {

	glClear(GL_COLOR_BUFFER_BIT);


	glBegin(GL_POLYGON);
    glColor3ub(235, 152, 78 );
    glVertex2f(-8.0,1.50);
    glVertex2f(8.0,1.50);
    glVertex2f(8.0,0.0);
    glVertex2f(-8.0,0.0);
    glVertex2f(-8.0,1.50);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(151, 154, 154 );
    glVertex2f(-8.0,0.0);
    glVertex2f(8.0,0.0);
    glVertex2f(8.0,-6.0);
    glVertex2f(-8.0,-6.0);
    glVertex2f(-8.0,0.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(23, 32, 42 );
    glVertex2f(-8.0,0.0);
    glVertex2f(-6.0,0.0);
    glVertex2f(-6.0,-6.0);
    glVertex2f(-8.0,-6.0);
    glVertex2f(-8.0,0.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(236, 240, 241 );
    glVertex2f(-6.0,0.0);
    glVertex2f(-4.0,0.0);
    glVertex2f(-4.0,-6.0);
    glVertex2f(-6.0,-6.0);
    glVertex2f(-6.0,0.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(23, 32, 42 );
    glVertex2f(-4.0,0.0);
    glVertex2f(-2.0,0.0);
    glVertex2f(-2.0,-6.0);
    glVertex2f(-4.0,-6.0);
    glVertex2f(-4.0,0.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(236, 240, 241 );
    glVertex2f(-2.0,0.0);
    glVertex2f(0.0,0.0);
    glVertex2f(0.0,-6.0);
    glVertex2f(-2.0,-6.0);
    glVertex2f(-2.0,0.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(23, 32, 42  );
    glVertex2f(0.0,0.0);
    glVertex2f(2.0,0.0);
    glVertex2f(2.0,-6.0);
    glVertex2f(0.0,-6.0);
    glVertex2f(0.0,0.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(236, 240, 241);
    glVertex2f(2.0,0.0);
    glVertex2f(4.0,0.0);
    glVertex2f(4.0,-6.0);
    glVertex2f(2.0,-6.0);
    glVertex2f(2.0,0.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(23, 32, 42);
    glVertex2f(4.0,0.0);
    glVertex2f(6.0,0.0);
    glVertex2f(6.0,-6.0);
    glVertex2f(4.0,-6.0);
    glVertex2f(4.0,0.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(236, 240, 241);
    glVertex2f(6.0,0.0);
    glVertex2f(8.0,0.0);
    glVertex2f(8.0,-6.0);
    glVertex2f(6.0,-6.0);
    glVertex2f(6.0,0.0);
    glEnd();

    glBegin(GL_LINES);
    glColor3ub(23, 32, 42);
    glVertex2f(-8.0,-6.0);
    glVertex2f(8.0,-6.0);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(23, 32, 42);
    glVertex2f(4.50,0.50);
    glVertex2f(5.25,0.50);
    glVertex2f(5.25,5.50);
    glVertex2f(4.50,5.50);
    glVertex2f(4.50,0.50);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(23, 32, 42);
    glVertex2f(3.00,5.50);
    glVertex2f(6.50,5.50);
    glVertex2f(6.50,7.0);
    glVertex2f(3.00,7.0);
    glVertex2f(3.00,5.50);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(192, 57, 43  );
    glVertex2f(-6.5,-4.00);
    glVertex2f(-6.50,-2.0);
    glVertex2f(-3.75,-2.0);
    glVertex2f(-3.00,-0.50);
    glVertex2f(-0.50,-0.50);
    glVertex2f(0.25,-2.0);
    glVertex2f(3.25,-2.0);
    glVertex2f(3.25,-4.00);
    glVertex2f(1.75,-4.0);
    glVertex2f(1.25,-3.50);
    glVertex2f(0.75,-3.50);
    glVertex2f(0.25,-4.00);
    glVertex2f(-4.25,-4.00);
    glVertex2f(-4.75,-3.50);
    glVertex2f(-5.25,-3.50);
    glVertex2f(-5.75,-4.00);
    glVertex2f(-6.50,-4.00);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(229, 231, 233 );
    glVertex2f(-1.75,-1.00);
    glVertex2f(-1.0,-1.0);
    glVertex2f(-0.25,-2.00);
    glVertex2f(-1.75,-2.00);
    glVertex2f(-1.75,-1.00);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3ub(229, 231, 233 );
    glVertex2f(-2.25,-1.00);
    glVertex2f(-3.0,-1.0);
    glVertex2f(-3.50,-2.00);
    glVertex2f(-2.25,-2.00);
    glVertex2f(-2.25,-1.00);
    glEnd();


















    //glLineWidth(7.5);
    circle(0.5,3.75,6.25);
    circle1(0.5,4.75,6.25);
    circle2(0.5,5.75,6.25);
    circle3(0.75,-5.00,-4.00);
    circle4(0.75,1.0,-4.00);


	glFlush();
}


int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitWindowSize(1200,1000);
    glutCreateWindow("Traffic Light");
	glClearColor(1.0,1.0,1.0,1.0);
	gluOrtho2D(-8.0,8.0,-8.0,8.0);
	glutDisplayFunc(display);
	glutMainLoop();
	return 0;
}
